from __future__ import division
# from pylab import *
import numpy as np
# from scipy import special, optimize
import matplotlib.pyplot as plt

# Read binary data file generated by C++ code.
def readDataFile(name):
    f = open(name, 'rb')
    N, M = (int(i) for i in f.readline().split())
    return np.fromfile(f, dtype=np.float32, count=N*M).reshape(M,N)

# Show min abs polynomial fractal with reprsentative heat map + scaling.
def imsh(F, m, **a):
    plt.imshow(np.mod(F, m), cmap=plt.cm.gist_heat_r, origin='lower')# , vmin=0.95,vmax=1.1, **a)
    


from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
#import matplotlib.pyplot as plt
#import numpy as np
dat = readDataFile("poly_20_1000.dat")

# plt.savefig("polyimgs/heatmap.png")

# dat = readDataFile("minpoly.dat")
# print(dat.min(), dat.max())
k = 0

# for i in np.linspace(-1, 0, 5):
p = np.linspace(0.01,0.1,20)
c = np.zeros(len(p))
for i in range(len(p)):
    binary_img = (dat < p[i])
    # figure(figsize=(6,6))
    plt.imshow(binary_img)
    # plt.imshow(np.mod(dat, 10.0**i), cmap=plt.cm.gist_heat_r, origin='lower', vmin=0.0,vmax=2.0)
    c[i] = sum(sum(binary_img))
    plt.savefig("polyimgs/poly" + str(k) + "_" + str(p[i]) + ".png")
    k += 1

plt.plot(p, c)
plt.savefig("polyimgs/sumvtime.png")
